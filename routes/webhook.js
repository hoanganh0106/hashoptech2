// Webhook Routes - MongoDB Version
const express = require('express');
const router = express.Router();
const config = require('../config');
const telegramService = require('../services/telegram');
const emailService = require('../services/email');

// Import Models
const Order = require('../models/Order');
const Account = require('../models/Account');

/**
 * Handler function cho Sepay webhook
 */
async function handleSepayWebhook(req, res) {
  try {
    console.log('üì• Nh·∫≠n webhook t·ª´ Sepay:', req.body);

    // Sepay g·ª≠i data v·ªõi format kh√°c
    const {
      id,
      referenceCode,
      transferAmount,
      content,
      gateway,
      transferType,
      code
    } = req.body;

    const transaction_id = referenceCode || id;
    const amount = transferAmount;
    const bank_code = gateway;

    console.log('üí∞ S·ªë ti·ªÅn:', amount);
    console.log('üìù N·ªôi dung:', content);
    console.log('üÜî M√£ GD:', transaction_id);

    // TODO: L∆∞u payment log v√†o MongoDB n·∫øu c·∫ßn

    // Ch·ªâ x·ª≠ l√Ω giao d·ªãch chuy·ªÉn v√†o
    if (transferType !== 'in') {
      console.log('‚ö†Ô∏è  Kh√¥ng ph·∫£i giao d·ªãch chuy·ªÉn v√†o:', transferType);
      return res.json({ success: true, message: 'ƒê√£ nh·∫≠n webhook' });
    }

    // T√¨m ƒë∆°n h√†ng kh·ªõp v·ªõi n·ªôi dung chuy·ªÉn kho·∫£n
    let matchedOrder = null;

    // ∆Øu ti√™n t√¨m theo field 'code' n·∫øu Sepay g·ª≠i (ch·ªâ t√¨m pending, kh√¥ng t√¨m cancelled)
    if (code) {
      console.log('üîç T√¨m ƒë∆°n h√†ng theo code:', code);
      matchedOrder = await Order.findOne({
        orderCode: code,
        paymentStatus: 'pending' // Ch·ªâ t√¨m ƒë∆°n h√†ng pending, kh√¥ng t√¨m cancelled
      });
      
      if (matchedOrder) {
        console.log('‚úÖ T√¨m th·∫•y ƒë∆°n h√†ng theo code:', matchedOrder.orderCode);
      }
    }

    // N·∫øu kh√¥ng t√¨m th·∫•y, t√¨m theo n·ªôi dung chuy·ªÉn kho·∫£n (ch·ªâ t√¨m pending)
    if (!matchedOrder && content) {
      console.log('üîç T√¨m ƒë∆°n h√†ng theo content');
      const orders = await Order.find({ paymentStatus: 'pending' }); // Ch·ªâ t√¨m pending

      if (orders && orders.length > 0) {
        const contentLower = content.toLowerCase().trim();

        for (const order of orders) {
          const orderCodeLower = order.orderCode.toLowerCase();
          
          // Ki·ªÉm tra kh·ªõp m√£ ƒë∆°n h√†ng v√† s·ªë ti·ªÅn
          if (contentLower.includes(orderCodeLower) && Math.abs(amount - order.totalAmount) < 1000) {
            matchedOrder = order;
            console.log('‚úÖ T√¨m th·∫•y ƒë∆°n h√†ng theo content:', matchedOrder.orderCode);
            break;
          }
        }
      }
    }

    if (!matchedOrder) {
      console.log('‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng kh·ªõp');
      
      // G·ª≠i th√¥ng b√°o Telegram v·ªÅ giao d·ªãch kh√¥ng x√°c ƒë·ªãnh
      await telegramService.sendMessage(
        `‚ö†Ô∏è GIAO D·ªäCH KH√îNG X√ÅC ƒê·ªäNH\n\n` +
        `üí∞ S·ªë ti·ªÅn: ${amount.toLocaleString()}ƒë\n` +
        `üìù N·ªôi dung: ${content}\n` +
        `üè¶ Ng√¢n h√†ng: ${bank_code}\n` +
        `üÜî M√£ GD: ${transaction_id}\n\n` +
        `Vui l√≤ng ki·ªÉm tra th·ªß c√¥ng!`
      );
      
      return res.json({ success: true, message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng kh·ªõp' });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    matchedOrder.paymentStatus = 'paid';
    matchedOrder.paidAt = new Date();
    matchedOrder.bankTransactionId = transaction_id;
    await matchedOrder.save();

    console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t ƒë∆°n h√†ng:', matchedOrder.orderCode);

    // Import Product ƒë·ªÉ l·∫•y stockType
    const Product = require('../models/Product');
    
    // Ph√¢n lo·∫°i items: t·ª± ƒë·ªông l·∫•y t·ª´ kho vs c·∫ßn chu·∫©n b·ªã h√†ng
    const deliveredAccounts = [];
    const itemsNeedPreparation = [];

    for (const item of matchedOrder.items) {
      // L·∫•y stockType t·ª´ item ho·∫∑c t·ª´ product
      let stockType = item.stockType;
      
      if (!stockType) {
        // N·∫øu kh√¥ng c√≥ trong item, l·∫•y t·ª´ product variant
        const product = await Product.findById(item.productId);
        if (product && product.variants) {
          const variant = product.variants.find(v => v.name === item.variantName);
          if (variant) {
            stockType = variant.stockType || 'available';
          }
        }
      }

      stockType = stockType || 'available';
      console.log(`üì¶ Processing item: ${item.productName} - ${item.variantName} (stockType: ${stockType})`);

      // Ch·ªâ t·ª± ƒë·ªông l·∫•y t·ª´ kho khi stockType === 'available' v√† c√≥ ƒë·ªß h√†ng
      if (stockType === 'available') {
        let hasEnoughStock = true;
        
        for (let i = 0; i < item.quantity; i++) {
          const account = await Account.findOne({
            productId: item.productId,
            status: 'available',
            variantName: item.variantName
          });

          if (account) {
            deliveredAccounts.push({
              productId: item.productId,
              variantName: item.variantName,
              username: account.username,
              password: account.password,
              deliveredAt: new Date()
            });

            // ƒê√°nh d·∫•u account ƒë√£ b√°n
            account.status = 'sold';
            account.soldToOrderId = matchedOrder._id;
            account.soldAt = new Date();
            await account.save();
          } else {
            hasEnoughStock = false;
          }
        }

        // N·∫øu kh√¥ng ƒë·ªß h√†ng, th√™m v√†o danh s√°ch c·∫ßn chu·∫©n b·ªã
        if (!hasEnoughStock) {
          const availableCount = await Account.countDocuments({
            productId: item.productId,
            status: 'available',
            variantName: item.variantName
          });
          
          itemsNeedPreparation.push({
            productName: item.productName,
            variantName: item.variantName,
            requested: item.quantity,
            available: availableCount,
            stockType: stockType,
            reason: 'H·∫øt h√†ng'
          });
        }
      } else {
        // stockType === 'contact' - lu√¥n c·∫ßn chu·∫©n b·ªã h√†ng
        itemsNeedPreparation.push({
          productName: item.productName,
          variantName: item.variantName,
          requested: item.quantity,
          available: 0,
          stockType: stockType,
          reason: 'C·∫ßn li√™n h·ªá'
        });
      }
    }

    // C·∫≠p nh·∫≠t delivery status
    if (deliveredAccounts.length > 0) {
      matchedOrder.deliveredAccounts = deliveredAccounts;
      // Ch·ªâ ƒë√°nh d·∫•u completed n·∫øu t·∫•t c·∫£ items ƒë·ªÅu ƒë√£ giao
      const totalItemsCount = matchedOrder.items.reduce((sum, item) => sum + item.quantity, 0);
      if (deliveredAccounts.length === totalItemsCount) {
        matchedOrder.deliveryStatus = 'completed';
        matchedOrder.deliveredAt = new Date();
      } else {
        matchedOrder.deliveryStatus = 'processing';
      }
      await matchedOrder.save();
    }

    // G·ª≠i th√¥ng b√°o Telegram
    if (itemsNeedPreparation.length > 0) {
      // C√≥ s·∫£n ph·∫©m c·∫ßn chu·∫©n b·ªã h√†ng - ch·ªâ g·ª≠i 1 th√¥ng b√°o duy nh·∫•t
      console.log(`üì¢ G·ª≠i th√¥ng b√°o Telegram: C√≥ ${itemsNeedPreparation.length} s·∫£n ph·∫©m c·∫ßn chu·∫©n b·ªã h√†ng`);
      await telegramService.notifyOrderNeedPreparation(matchedOrder, itemsNeedPreparation);
      console.log('‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o chu·∫©n b·ªã h√†ng');
    } else {
      // T·∫•t c·∫£ ƒë·ªÅu t·ª± ƒë·ªông giao h√†ng
      await telegramService.notifyPaymentSuccess(matchedOrder, transaction_id);
      
      // G·ª≠i chi ti·∫øt t√†i kho·∫£n ƒë√£ giao
      if (deliveredAccounts.length > 0) {
        let accountDetails = `üìã Danh s√°ch t√†i kho·∫£n ƒë√£ giao:\n`;
        deliveredAccounts.forEach((acc, index) => {
          accountDetails += `${index + 1}. ${acc.variantName || 'N/A'}\n`;
          accountDetails += `   ‚Ä¢ User: ${acc.username}\n`;
          accountDetails += `   ‚Ä¢ Pass: ${acc.password}\n`;
        });
        await telegramService.sendMessage(accountDetails);
      }
    }

    // G·ª≠i email cho kh√°ch h√†ng
    if (deliveredAccounts.length > 0) {
      // C√≥ t√†i kho·∫£n trong kho - g·ª≠i th√¥ng tin t√†i kho·∫£n
      console.log(`üìß ƒêang g·ª≠i email th√¥ng tin t√†i kho·∫£n cho kh√°ch h√†ng (${deliveredAccounts.length} t√†i kho·∫£n)...`);
      const emailSent = await emailService.sendAccountInfo(matchedOrder, deliveredAccounts);
      
      if (emailSent) {
        console.log('‚úÖ ƒê√£ g·ª≠i email th√¥ng tin t√†i kho·∫£n th√†nh c√¥ng');
      } else {
        console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i email (ch∆∞a c·∫•u h√¨nh email service)');
      }
    } else if (itemsNeedPreparation.length > 0) {
      // N·∫øu c√≥ items c·∫ßn chu·∫©n b·ªã h√†ng, kh√¥ng g·ª≠i email ngay (s·∫Ω g·ª≠i sau khi admin chu·∫©n b·ªã xong)
      console.log(`üì¶ C√≥ ${itemsNeedPreparation.length} s·∫£n ph·∫©m c·∫ßn chu·∫©n b·ªã h√†ng - Kh√¥ng g·ª≠i email, Admin s·∫Ω g·ª≠i th√¥ng tin sau khi chu·∫©n b·ªã xong`);
    } else {
      console.log('‚ÑπÔ∏è Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë·ªÉ g·ª≠i email');
    }

    res.json({ 
      success: true, 
      message: 'ƒê√£ x·ª≠ l√Ω thanh to√°n',
      orderCode: matchedOrder.orderCode,
      delivered: deliveredAccounts.length > 0,
      customerEmail: matchedOrder.customerEmail,
      emailSent: deliveredAccounts.length > 0
    });

  } catch (error) {
    console.error('‚ùå L·ªói x·ª≠ l√Ω webhook:', error);
    res.status(500).json({ error: 'L·ªói x·ª≠ l√Ω webhook' });
  }
}

/**
 * POST /api/webhook/sepay - Endpoint webhook ch√≠nh
 */
router.post('/sepay', handleSepayWebhook);

/**
 * POST /hooks/sepay-payment/ - Endpoint t∆∞∆°ng th√≠ch v·ªõi c·∫•u h√¨nh Sepay c·ªßa user
 */
router.post('/sepay-payment/', handleSepayWebhook);

module.exports = router;
